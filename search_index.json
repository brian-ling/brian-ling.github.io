[["index.html", "STAT 362 R for Data Science Syllabus", " STAT 362 R for Data Science Brian Ling 2021-01-12 Syllabus STAT 362 R for Data Science Department of Mathematics and Statistics, Queens University Course Description: Introduction to R, data creation and manipulation, data import and export, scripts and functions, control flow, debugging and profiling, data visualization, statistical inference, Monte Carlo methods, decision trees, support vector machines, neural network, numerical methods. Format and Time: Each week: Two asynchronous lectures will be uploaded on Tue and Wed. We will have one synchronous lecture on Thu (10:30-11:20am) via zoom. Meeting link: see onQ. Recording of the synchronous lecture will be uploaded to onQ. All times are Kingston Time Annoucement, Schedule, Lecture notes: https://brian-ling.github.io/ Instructor: Brian Ling (bl90@queensu.ca) Teacher assistant: Xinyi GE (16xg3@queensu.ca), Na LI (18nl6@queensu.ca). They will be responsible for grading your assignments. Office Hours: Wed 9pm-10pm, Thu 1pm-2pm, or by appointment (let me know if you cannot attend any of these) Intended Student Learning Outcomes: Understand the fundamental concepts in R Be able to import and tidy data for further analysis Be able to visualize data and perform exploratory data analysis Be able to apply appropriate methods for statistical analysis and interpret the output Be able to apply common machine learning algorithms with real-world applications Understand the basics of numerical and Monte Carlo methods Prerequisite: (STAT 263/3.0 or STAT 268/3.0) and MATH 120/3.0 or MATH 121/3.0 or MATH 124/3.0 MATH 126/3.0 or MATH 110/6.0 or MATH 111/6.0 or (MATH 112/3.0 and MATH 212/3.0) or permission of the department. In words, you need to understand probability and statistics, linear algebra (matrix operations), and basic calculus. Lecture Notes: This website. Lecture Videos See onQ. Main Textbooks/Readings: R for Data Science, by Garrett Grolemund and Hadley Wickham (https://r4ds.had.co.nz/) Machine Learning with R, by Brett Lantz R Cookbook, by J.D. Long &amp; Paul Teetor (https://rc2e.com/) Other Reference Textbooks/Readings: R Markdown: The Definitive Guide, by Yihui Xie, J. J. Allaire, Garrett Grolemund (https://bookdown.org/yihui/rmarkdown/) R Graphics Cookbook, by Winston Chang (https://r-graphics.org/) An introduction to R, by W. N. Venables, D. M. Smith and the R Core Team (https://cran.r-project.org/doc/manuals/r-release/R-intro.pdf) Course Outline: R Basic Installing R, Rstudio and packages Basic data types and operations Data structures: vector, matrix, array, list, dara frame Data input and output Scripts and functions Control flow Data visualization with ggplot2 Data manipulation with tidyverse Statistical inference in R: one/two-sample test of mean and proportion; correlation test; non-parametric test; regression analysis Some machine learning methods: nearest neighbors, naive Bayes, decision trees, support vector machines, neural network, k-means clustering Introduction to numerical methods: Monte Carlo simulation, gradient descent, Newton Raphson algorithm Note: actual topics may change slightly depending on our progress Grading Scheme: 30% assignments, 30% Quizzes, 40% Final Project Assignments (30%): There will be approximately 6 Assignments. Late submission: receive 80% of the points (within one day), receive 0 (after one day). No exception other than academic accommodation and academic consideration for an extenuating circumstance. Solution will be posted after one day of the due date. One assignment with the lowest score will be dropped. It is recommended to use R Markdown to write your assignment (https://rmarkdown.rstudio.com/lesson-1.html, R Cookbook Ch.16). A template for this will be discussed. Quizzes (30%): Weekly quizzes. Simple questions will be posted on Thursday each week and each quiz is due on Sunday noon (receive 80% afterwards). You should be able to answer them after attending the lectures. Two quizzes with the lowest score will be dropped. We have 12 weeks. So each quiz is worth 3% after dropping 2 quizzes with the lowest score. Final Project (40%): Form a group of 5-6 students. TA will help with assignment of the group if you cannot find one. 20% is from the final report. 20% is from the final presentation. All members in the group have to present (more details later). The members are expected to know every part of the project. Send your group member list (first name, last name, Queens email, student ID) to Xinyi GE (16xg3@queensu.ca) by Feb 5. If you cannot find a group, tell Xinyi (first name ,last name, Queens email, student ID, time zone). We will try to form a group for you with the same time zone. Academic Integrity: See https://www.queensu.ca/artsci/node/22/mid/1247 Departures from academic integrity include, but are not limited to, plagiarism, use of unauthorized materials, facilitation, forgery and falsification. Actions which contravene the regulation on academic integrity carry sanctions that can range from a warning, to loss of grades on an assignment, to failure of a course, to requirement to withdraw from the university. "],["schedule.html", "Schedule", " Schedule Lecture Content Reading Asg Quiz Sync Lect 1 Introduction of the course, installation of R and RStudio Syllabus   Lect 2 tbd   Lect 3 tbd Quiz 1 (Due Jan 17 noon) Yes (Thu 10:30-11:20am) "],["annoucement.html", "Annoucement", " Annoucement "],["introduction.html", "Chapter 1 Introduction 1.1 What is R and RStudio? 1.2 What will you learn in this course? 1.3 Lets Get Started 1.4 R Data Structures 1.5 Operators 1.6 Built-in Functions 1.7 Some Useful RStudio Shortcuts 1.8 Exercises", " Chapter 1 Introduction 1.1 What is R and RStudio? R R is a language and environment for statistical computing and graphics. R is an interpreted language (individual language expressions are read and then executed immediately as soon as the command is entered) To download R, go to https://cloud.r-project.org/ RStudio is an integrated development environment (IDE) for R programming Install R first, then go to https://rstudio.com/products/rstudio/download/ and download RStudio While you can work in R directly, it is recommended to work in RStudio. 1.2 What will you learn in this course? Note: we do not assume you know R or any programming language before. 1.2.1 R and R as a programming language operators control flow (if..else.., for loop) defining a function 1.2.2 Data Wrangling Data wrangling = the process of tidying and transforming the data 1.2.3 Data Visualization Graphs are powerful to illustrate features of the data. You will learn how to create some basic plots as well as using the package ggplot2 to create more elegant plots. Consider a dataset about cars. library(ggplot2) mpg ## # A tibble: 234 x 11 ## manufacturer model displ year cyl trans drv cty hwy fl class ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; ## 1 audi a4 1.8 1999 4 auto(l5) f 18 29 p compact ## 2 audi a4 1.8 1999 4 manual(m5) f 21 29 p compact ## 3 audi a4 2 2008 4 manual(m6) f 20 31 p compact ## 4 audi a4 2 2008 4 auto(av) f 21 30 p compact ## 5 audi a4 2.8 1999 6 auto(l5) f 16 26 p compact ## 6 audi a4 2.8 1999 6 manual(m5) f 18 26 p compact ## 7 audi a4 3.1 2008 6 auto(av) f 18 27 p compact ## 8 audi a4 quattro 1.8 1999 4 manual(m5) 4 18 26 p compact ## 9 audi a4 quattro 1.8 1999 4 auto(l5) 4 16 25 p compact ## 10 audi a4 quattro 2 2008 4 manual(m6) 4 20 28 p compact ## # ... with 224 more rows Among the variables in mpg are: displ, a cars engine size, in litres. hwy, a cars fuel efficiency on the highway, in miles per gallon (mpg). A car with a low fuel efficiency consumes more fuel than a car with a high fuel efficiency when they travel the same distance. Scatterplot Scatterplot, points are labeled with colors according to the class variable Scatterplots Line Chart Bar chart Another Bar Chart Boxplot Histogram 1.2.4 Statistical Inference Many problems in different domains can be formulated into hypothesis testing problems. Are university graduates more likely to vote for Candidate A? Is a treatment effective in reducing weights? Is a drug effective in reducing mortality rate? We want to answer these questions that take into account of the intrinsic variability. Formally, we can perform hypothesis testing and compute the confidence intervals. T These are what you learned in STAT 269. It is ok if you havent taken the STAT 269. The topics will be briefly reviewed. We will focus on the applications using R. 1.2.5 Machine Learning We will illustrate some machine learning methods using real datasets. For example, Diagnoising breast cancaer with the k-NN algorithm Employ Naive Bayes to build an SMS junk message filter (text data) A wordcloud of text data Use neural network to predict the compressive strength of concrete 1.2.6 Some Numerical Methods Monte Carlo simulation (estimate probabilities, expectations, integrals) numerical optimizaiton methods (e.g. maximizing a multi-parameter likelihood function using optim) 1.2.7 Lastly It is important to communicate your results to other after performing the data analysis. Therefore, you will do a project with presentation and report. 1.3 Lets Get Started The best way to learn R is to get started immediately and try the code by yourselves. We will not discuss every topic in detail at the beginning, which is not interesting and unnecessary. We shall revisit the topics when we need additional knowledge. Simple arithmetic expression # can be used a simple calculator 3+5 ## [1] 8 4*2 ## [1] 8 10/2 ## [1] 5 Comment a code: use the hash mark # # this is a comment, R will not run the code behine # Function for combining c(4, 2, 3) # &quot;c&quot; is to &quot;combine&quot; the numbers ## [1] 4 2 3 Assignment (&lt;- is the assignment operator like = in many other programming languages) y &lt;- c(4, 2, 3) # create a vector called y with elements 4, 2, 3 c(1, 3, 5) -&gt; v # c(1,3,5) is assigned to v Output y ## [1] 4 2 3 v ## [1] 1 3 5 R is case-sensitive. When you type Y, you will see an error message: object Y not found Y ## Error in eval(expr, envir, enclos): object &#39;Y&#39; not found 1.4 R Data Structures Reading: ML with R Ch2 Most frequently used data structures in R: vectors, factors, lists, arrays, matrices, data frames 1.4.1 Vectors Vector fundamental R data structure stores an ordered set of values called elements elements must be of the same type Type: integer, double, character, logical Integer, double, logical, character vectors x &lt;- 1:2 # integer vector, we use a:b to form the sequence of integers from a to b typeof(x) # type of the vector ## [1] &quot;integer&quot; x &lt;- c(1.1, 1.2) # double vector typeof(x) ## [1] &quot;double&quot; length(x) # length of the vector x ## [1] 2 x &lt; 2 # logical (TRUE/FALSE) ## [1] TRUE TRUE p &lt;- c(TRUE, FALSE) subject_name &lt;- c(&quot;John&quot;, &quot;Jane&quot;, &quot;Steve&quot;) # character vector Combine two vectors y &lt;- c(2,4,6) c(x, y) # note that we created x above ## [1] 1.1 1.2 2.0 4.0 6.0 c(y, subject_name) # 2, 4, 6 become characters &quot;2&quot;, &quot;4&quot;, &quot;6&quot; ## [1] &quot;2&quot; &quot;4&quot; &quot;6&quot; &quot;John&quot; &quot;Jane&quot; &quot;Steve&quot; 1.4.2 Factors A factor is a special case of vector that is solely used for representing categoical or ordinal variables Reasons for using factor the category labels are stored only once. E.g., rather than storing MALE, MALE, MALE, FEMALE, the computer may store 1,1,1,2(save memory) many machine learning algorithms treat nominal and numeric features differently and may require the input as a factor Create a factor gender &lt;- factor(c(&quot;MALE&quot;, &quot;MALE&quot;, &quot;FEMALE&quot;, &quot;MALE&quot;)) # compared with c(&quot;MALE&quot;, &quot;MALE&quot;, &quot;FEMALE&quot;, &quot;MALE&quot;) ## [1] &quot;MALE&quot; &quot;MALE&quot; &quot;FEMALE&quot; &quot;MALE&quot; 1.4.3 Matrix Matrix a collection of numbers in a rectangular form A matrix with dimension n by m means the matrix has n rows and m columns. To create a \\(3\\times 4\\) matrix with elements 1:12 filled in column-wise A &lt;- matrix(1:12, nrow=3, ncol=4) # note that we use = instead of &lt;- A ## [,1] [,2] [,3] [,4] ## [1,] 1 4 7 10 ## [2,] 2 5 8 11 ## [3,] 3 6 9 12 Dimension, number of rows, number of columns of a matrix # again R is case-sensitive, a and A are different dim(A) # to find the dimension of A ## [1] 3 4 nrow(A) # to find the number of row in A ## [1] 3 ncol(A) # to find the number of column in A ## [1] 4 By default, the matrix is filled column-wise. You can change to row-wise by adding byrow = TRUE B &lt;- matrix(1:12, nrow = 3, ncol = 4, byrow = TRUE) B ## [,1] [,2] [,3] [,4] ## [1,] 1 2 3 4 ## [2,] 5 6 7 8 ## [3,] 9 10 11 12 Select rows, columns, submatrix, element A[1, 2] # select the element in the 1st row and 2nd column ## [1] 4 A[2, ] # select 2nd row ## [1] 2 5 8 11 A[, 3] # select 3rd column ## [1] 7 8 9 A[1:2, 3:4] # select a submatrix ## [,1] [,2] ## [1,] 7 10 ## [2,] 8 11 Try: A[c(1, 2), c(1, 3, 4)] A[-1, ] A[, -2] Combine Two Matrices cbind(A, B) # combine column-wise ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] ## [1,] 1 4 7 10 1 2 3 4 ## [2,] 2 5 8 11 5 6 7 8 ## [3,] 3 6 9 12 9 10 11 12 rbind(A, B) # combine row-wise ## [,1] [,2] [,3] [,4] ## [1,] 1 4 7 10 ## [2,] 2 5 8 11 ## [3,] 3 6 9 12 ## [4,] 1 2 3 4 ## [5,] 5 6 7 8 ## [6,] 9 10 11 12 Try: rbind(B, A) 1.4.4 Lists store an ordered set of elements like a vector can store different R data types (unlike a vector) # let&#39;s create some vectors (of different types) subject_name &lt;- c(&quot;John&quot;, &quot;Jane&quot;, &quot;Steve&quot;) # at this point, you should notice that meaningful names should be used for the variables temperature &lt;- c(98.1, 98.6, 101.4) flu_status &lt;- c(FALSE, FALSE, TRUE) # notice how we use _ to separate two words (this is one of the styles in coding, you should be consistent with your style) data &lt;- list(fullname = subject_name, temperature = temperature, flu_status = flu_status) # you may wonder what is the meaning of temperature = temperature # in &quot;fullname = subject_name&quot; # on the left of = is the name of the 1st element of your list # on the right of = is the name of the variable that you want to # assign the value to the 1st element data ## $fullname ## [1] &quot;John&quot; &quot;Jane&quot; &quot;Steve&quot; ## ## $temperature ## [1] 98.1 98.6 101.4 ## ## $flu_status ## [1] FALSE FALSE TRUE To assess the element of a list: data$flu_status ## [1] FALSE FALSE TRUE data[c(&quot;temperature&quot;, &quot;flu_status&quot;)] ## $temperature ## [1] 98.1 98.6 101.4 ## ## $flu_status ## [1] FALSE FALSE TRUE data[2:3] # if you don&#39;t have the names ## $temperature ## [1] 98.1 98.6 101.4 ## ## $flu_status ## [1] FALSE FALSE TRUE 1.4.5 Data frames Data frame can be understood as a list of vectors, each having exactly the same number of values, arranged in a structure like a spreadsheet or database gender &lt;- c(&quot;MALE&quot;, &quot;FEMALE&quot;, &quot;MALE&quot;) blood &lt;- c(&quot;O&quot;, &quot;AB&quot;, &quot;A&quot;) pt_data &lt;- data.frame(subject_name, temperature, flu_status, gender, blood) pt_data ## subject_name temperature flu_status gender blood ## 1 John 98.1 FALSE MALE O ## 2 Jane 98.6 FALSE FEMALE AB ## 3 Steve 101.4 TRUE MALE A colnames(pt_data) ## [1] &quot;subject_name&quot; &quot;temperature&quot; &quot;flu_status&quot; &quot;gender&quot; &quot;blood&quot; pt_data$subject_name ## [1] &quot;John&quot; &quot;Jane&quot; &quot;Steve&quot; pt_data[c(&quot;temperature&quot;, &quot;flu_status&quot;)] ## temperature flu_status ## 1 98.1 FALSE ## 2 98.6 FALSE ## 3 101.4 TRUE pt_data[1, ] # like a matrix ## subject_name temperature flu_status gender blood ## 1 John 98.1 FALSE MALE O pt_data[, 2:3] ## temperature flu_status ## 1 98.1 FALSE ## 2 98.6 FALSE ## 3 101.4 TRUE Create a new column pt_data$temp_c &lt;- (pt_data$temperature - 32)*5/9 pt_data ## subject_name temperature flu_status gender blood temp_c ## 1 John 98.1 FALSE MALE O 36.72222 ## 2 Jane 98.6 FALSE FEMALE AB 37.00000 ## 3 Steve 101.4 TRUE MALE A 38.55556 1.5 Operators Priority Operator Meaning 1 $ component selection 2 [ [[ subscripts, elements 3 ^ exponentiation 4 - unary minus 5 : sequence operator 6 %% %/% %*% modulus, integer divide, matrix multiply 7 * / multiply, divide 8 + - add, subtract 9 &lt; &gt; &lt;= &gt;= == != comparison 10 ! not 11 &amp; | &amp;&amp; || logical and, logical or 12 &lt;- -&gt; = assignments &amp; and &amp;&amp; indicate logical AND. The shorter form performs elementwise comparisons. The longer form examine only the first element of each vector. x &lt;- c(TRUE, FALSE, TRUE) y &lt;- c(FALSE, FALSE, TRUE) x&amp;y ## [1] FALSE FALSE TRUE x&amp;&amp;y ## [1] FALSE z &lt;- c(TRUE) x&amp;&amp;z ## [1] TRUE | and || indicate logical OR. The shorter form performs elementwise comparisons. The longer form examine only the first element of each vector. x &lt;- c(TRUE, FALSE, TRUE) y &lt;- c(FALSE, FALSE, TRUE) x|y ## [1] TRUE FALSE TRUE x||y ## [1] TRUE z &lt;- c(TRUE) x||z ## [1] TRUE x &lt;- 1:4 x &lt; 3 ## [1] TRUE TRUE FALSE FALSE !(x&lt;3) ## [1] FALSE FALSE TRUE TRUE x == 1 # we should use == instead of = for the comparison ## [1] TRUE FALSE FALSE FALSE x != 1 ## [1] FALSE TRUE TRUE TRUE Do !(x &gt; 1) &amp; (x &lt; 4) and !((x &gt; 1) &amp; (x &lt; 4)) give different results? 1.5.1 Vectorized Operators An important property of many of the operators is that they are vectorized. This means that the operation will be performed elementwise. x &lt;- c(1,2,3) y &lt;- c(5,6,7) x+y ## [1] 6 8 10 x*y ## [1] 5 12 21 2*x # you do not need to use c(2,2,2)*x ## [1] 2 4 6 y/2 # you do not need to use y/c(2,2,2) ## [1] 2.5 3.0 3.5 A &lt;- matrix(1:9, nrow = 3, ncol = 3) B &lt;- matrix(1:9, nrow = 3, ncol = 3) A+B ## [,1] [,2] [,3] ## [1,] 2 8 14 ## [2,] 4 10 16 ## [3,] 6 12 18 A*B # this is not matrix multiplication, but elementiwse multiplication ## [,1] [,2] [,3] ## [1,] 1 16 49 ## [2,] 4 25 64 ## [3,] 9 36 81 A%*%B # this is matrix multiplication ## [,1] [,2] [,3] ## [1,] 30 66 102 ## [2,] 36 81 126 ## [3,] 42 96 150 1.6 Built-in Functions Common mathematical functions sqrt, abs, sin, cos, log, exp. To get help on the usage of a function. Use ?. For example, if you want to know more about log. Type ?log in the console. You will then see that by default, log computes the natrual logarithms. Other useful functions Name Operations ceiling smallest integer greater than or equal to element floor largest integer less than or equal to element trunc ignore the decimal part round round up for positive and round down for negative sort sort the vector in ascending or descending order sum, prod sum and produce of a vector cumsum, cumprod cumulative sum and product min, max return the smallest and largest values range return a vector of length 2 containing the min and max mean return the sample mean of a vector var return the sample variance of a vector sd return the sample standard deviation of a vector seq generate a sequence of number rep replicate elements in a vector Note: If you have data \\(x_1,\\ldots,x_n\\), the sample variance is defined as \\[ S^2_n := \\frac{1}{n-1} \\sum^n_{i=1}(x_i-\\overline{x}_n)^2. \\] Note that we divide the sum by \\(n-1\\) but not \\(n\\). The sample standard deviation is the square root of the sample variance. x &lt;- 1:5 y &lt;- sqrt(x) y ## [1] 1.000000 1.414214 1.732051 2.000000 2.236068 ceiling(y) ## [1] 1 2 2 2 3 sum(x) ## [1] 15 prod(x) ## [1] 120 cumsum(x) ## [1] 1 3 6 10 15 cumprod(x) ## [1] 1 2 6 24 120 min(x) ## [1] 1 max(x) ## [1] 5 range(x) ## [1] 1 5 mean(x) ## [1] 3 var(x) ## [1] 2.5 rep(0, 10) # create a vector of length 10 with all elements being 0 ## [1] 0 0 0 0 0 0 0 0 0 0 rep(1, 10) # create a vector of length 10 with all elements being 1 ## [1] 1 1 1 1 1 1 1 1 1 1 1.6.1 seq() This is an example of function with more than one argument. # seq(from, to) seq(1:5) ## [1] 1 2 3 4 5 seq(from = 1, to = 5) ## [1] 1 2 3 4 5 # seq(from, to, by) seq(1, 5, 2) ## [1] 1 3 5 seq(from = 1, to =5, by = 2) ## [1] 1 3 5 # seq(from, to, length) seq(0, 10, length = 21) ## [1] 0.0 0.5 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0 5.5 6.0 6.5 7.0 7.5 8.0 8.5 9.0 9.5 10.0 seq(from = 0, to = 10, length = 21) ## [1] 0.0 0.5 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0 5.5 6.0 6.5 7.0 7.5 8.0 8.5 9.0 9.5 10.0 1.6.2 rep() # rep(data, times), try ?rep rep(0, 10) ## [1] 0 0 0 0 0 0 0 0 0 0 rep(c(1,2,3), 3) ## [1] 1 2 3 1 2 3 1 2 3 1.7 Some Useful RStudio Shortcuts See also https://support.rstudio.com/hc/en-us/articles/200711853-Keyboard-Shortcuts Ctrl + 1: Move focus to the Source Editor (when you are in the Console) Ctrl + 2: Move focus to the Console (when you are in the source window) \\(\\uparrow\\) (the up arrow key on the keyboard): go to the previous command (in the console) \\(\\downarrow\\) (the down arrow key on the keyboard): go to the next command (in the console) Esc: Delete the current command/ Interrupt currently executing command Ctrl + Tab: go to the next tab 1.8 Exercises To test your understanding, try to evaluate the following code by hand and then check with the output from R. x &lt;- (10:1)[c(-1,-4)] x &lt;- x^2 x[5] # what do you expect to see? a&lt;-c(1:3,6,3+3,&quot;sta&quot;,3&gt;5) a #? typeof(a) #? length(a) #? x&lt;-rep(1:6,rep(1:3,2)) &gt; x%%2==0 #? &gt; x[x%%2==0] #? &gt; round(-3.7) #? &gt; trunc(-3.7) #? &gt; floor(-3.7) #? &gt; ceiling(-3.7) #? &gt; round(3.8) #? &gt; trunc(3.8) #? &gt; floor(3.8) #? &gt; ceiling(3.8) #? &gt; x&lt;-c(4,3,8,7,5,6,2,1) &gt; sort(x) #? &gt; order(x) #? &gt; sum(x)+prod(x) #? &gt; cumsum(x)+cumprod(x) #? &gt; max(x)+min(x) #? "]]
